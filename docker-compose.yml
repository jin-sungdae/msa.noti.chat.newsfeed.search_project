version: '3.8'

networks:
  msa-network:
    driver: bridge

services:
  common-lib:
    build:
      context: .
      dockerfile: common-lib/Dockerfile
    container_name: common-lib
    networks:
      - msa-network
    volumes:
      - common-maven:/root/.m2
    command: ["mvn", "clean", "install", "-DskipTests"]

  # Eureka Discovery Server
  discovery-server:
    build: ./discovery-server
    container_name: discovery-server
    ports:
      - "8761:8761"
    depends_on:
      - common-lib
    networks:
      - msa-network

  # Spring Cloud Config Server
  config-server:
    build: ./config-server
    container_name: config-server
    depends_on:
      - discovery-server
      - common-lib
    ports:
      - "8888:8888"
    networks:
      - msa-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  # API Gateway
  gateway-service:
    build: ./api-gateway
    container_name: gateway-service
    depends_on:
      - discovery-server
      - config-server
      - common-lib
    ports:
      - "8080:8080"
    networks:
      - msa-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: notification-service/Dockerfile
    container_name: notification-service
    depends_on:
      - discovery-server
      - config-server
      - common-lib
      - kafka
    ports:
      - "8081:8081"
    networks:
      - msa-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - common-maven:/root/.m2

  # Newsfeed Service
  newsfeed-service:
    build:
      context: .
      dockerfile: newsfeed-service/Dockerfile
    container_name: newsfeed-service
    depends_on:
      - discovery-server
      - config-server
      - common-lib
    ports:
      - "8082:8082"
    networks:
      - msa-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - common-maven:/root/.m2

  # Chat Service
  chat-service:
    build:
      context: .
      dockerfile: chat-service/Dockerfile
    container_name: chat-service
    depends_on:
      - discovery-server
      - config-server
      - common-lib
    ports:
      - "8083:8083"
    networks:
      - msa-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - common-maven:/root/.m2

  # Search Service
  search-service:
    build:
      context: .
      dockerfile: search-service/Dockerfile
    container_name: search-service
    depends_on:
      - discovery-server
      - config-server
      - common-lib
    ports:
      - "8084:8084"
    networks:
      - msa-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - common-maven:/root/.m2

  # Kafka를 위한 Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - msa-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - msa-network

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "5131"
      MYSQL_USER: "sjin"
      MYSQL_PASSWORD: "5131"
      MYSQL_ROOT_HOST: "%"
    ports:
      - "3307:3306"
    networks:
      - msa-network
    volumes:
      - ./database/init-scripts/init-mysql.sql:/docker-entrypoint-initdb.d/init-mysql.sql
      - ./database/init-scripts/mock-data.sql:/docker-entrypoint-initdb.d/mock-data.sql

  redis:
    image: redis:6.2
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - msa-network
    volumes:
      - ./database/config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.1.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=changeme
    ports:
      - "9200:9200"
    networks:
      - msa-network
    volumes:
      - ./database/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml

volumes:
  common-maven:
